package net.sf.alchim.spoon.contrib.maven;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.net.URL;
import java.util.Iterator;
import java.util.Locale;
import java.util.ResourceBundle;

import org.apache.maven.doxia.siterenderer.Renderer;
import org.apache.maven.model.ReportPlugin;
import org.apache.maven.project.MavenProject;
import org.apache.maven.reporting.AbstractMavenReport;
import org.apache.maven.reporting.MavenReportException;
import org.codehaus.plexus.util.FileUtils;
import org.codehaus.plexus.util.IOUtil;
import org.codehaus.plexus.util.PathTool;
import org.codehaus.plexus.util.StringUtils;

/**
 * @description Generates a Spoon Html Report.
 * @goal report-only
 * @execute phase="compile"
 * @requiresDependencyResolution
 * @requiresProject
 *
 * @author David Bernard (dwayne)
 * @created 2007
 */
public class SpoonReportMojo extends AbstractMavenReport {
    /**
     * Location where generated html will be created.
     *
     * @parameter default-value="${project.reporting.outputDirectory}"
     * @required
     */
    private String outputDirectory;

    /**
     * Doxia Site Renderer.
     *
     * @parameter expression="${component.org.apache.maven.doxia.siterenderer.Renderer}"
     * @required
     * @readonly
     */
    private Renderer siteRenderer;

    /**
     * Maven Project
     *
     * @parameter expression="${project}"
     * @required
     * @readonly
     */
    private MavenProject project;

    /**
     * Location of the Xrefs to link.
     *
     * @parameter default-value="${project.reporting.outputDirectory}/xref"
     */
    private File xrefLocation;

    /**
     * Whether to link the XRef if found.
     *
     * @parameter expression="${linkXRef}" default-value="true"
     */
    private boolean linkXRef;

    /**
     * The path of the result/log of spoon compiler/analyzer.
     *
     * @parameter expression="${project.build.directory}/spoon-report.csv"
     * @required
     */
    private File reportDataFile;

    @Override
    protected String getOutputDirectory() {
        return outputDirectory;
    }

    @Override
    protected MavenProject getProject() {
        return project;
    }

    @Override
    protected Renderer getSiteRenderer() {
        return siteRenderer;
    }

    private String getString(Locale locale, String key) {
        ResourceBundle bundle = ResourceBundle.getBundle(getOutputName(), locale, this.getClass().getClassLoader());
        return bundle.getString("report.spoon." + key);
    }

    public String getDescription(Locale locale) {
        return getString(locale, "description");
    }

    public String getName(Locale locale) {
        return getString(locale, "title");
    }

    public String getOutputName() {
        return "spoon-report";
    }

    private String determineXrefLocation() {
        String location = null;

        if (linkXRef) {
            String relativePath = PathTool.getRelativePath(outputDirectory, xrefLocation.getAbsolutePath());
            if (StringUtils.isEmpty(relativePath)) {
                relativePath = ".";
            }
            relativePath = relativePath + "/" + xrefLocation.getName();
            if (xrefLocation.exists()) {
                // XRef was already generated by manual execution of a lifecycle
                // binding
                location = relativePath;
            } else {
                // Not yet generated - check if the report is on its way
                for (Iterator<?> reports = project.getReportPlugins().iterator(); reports.hasNext();) {
                    ReportPlugin report = (ReportPlugin) reports.next();

                    String artifactId = report.getArtifactId();
                    if ("maven-jxr-plugin".equals(artifactId) || "jxr-maven-plugin".equals(artifactId)) {
                        location = relativePath;
                    }
                }
            }

            if (location == null) {
                getLog().warn("Unable to locate Test Source XRef to link to - DISABLED");
            }
        }
        return location;
    }

    @Override
    public boolean canGenerateReport() {
        return reportDataFile.exists();
    }

    private void copyStaticResources() throws Exception {
        final String pluginResourcesBase = this.getClass().getPackage().getName().replace('.', '/');
        String resourceNames[] = { "images/MESSAGE.png", "images/WARNING.png", "images/ERROR.png" };
        getLog().debug("Copying static resources.");
        for (String element : resourceNames) {
            URL url = this.getClass().getClassLoader().getResource(pluginResourcesBase + "/" + element);
            FileUtils.copyURLToFile(url, new File(outputDirectory, element));
        }
    }

    @Override
    protected void executeReport(Locale locale) throws MavenReportException {
        try {
            getLog().debug("initialize environement");
            copyStaticResources();
            SpoonReportGenerator generator = new SpoonReportGenerator(getSink(), ResourceBundle.getBundle(getOutputName(), locale, this.getClass().getClassLoader()), determineXrefLocation());

            getLog().debug("load data to display");
            SpoonReportData data = loadData();

            getLog().debug("print data in the report");
            generator.doGenerateReport(data);
        } catch (RuntimeException exc) {
            throw exc;
        } catch (MavenReportException exc) {
            throw exc;
        } catch (Exception exc) {
            throw new MavenReportException(exc.getMessage(), exc);
        }
    }

    // TODO load data from file
    private SpoonReportData loadData() throws Exception {
        SpoonReportData back = new SpoonReportData();
        back.begin();
        if (reportDataFile.exists()) {
            BufferedReader reader = null;
            try {
                reader = new BufferedReader(new FileReader(reportDataFile));
                String dataLine = null;
                while ((dataLine = reader.readLine()) != null) {
                    String[] datas = dataLine.split(";");
                    if (!"null".equalsIgnoreCase(datas[1])) {
                        back.add(datas[0], datas[1], datas[2], datas[3], datas[4]);
                    }
                }
            } finally {
                IOUtil.close(reader);
            }
        }
        // back.add("p0", "foo.bar.C1", "0", "WARNING", "msg0");
        // back.add("p0", "foo.bar.C1", "3", "WARNING", "msg2");
        // back.add("p0", "foo.bar.C2", "3", "MESSAGE", "msg3");
        back.end();
        return back;
    }
}
